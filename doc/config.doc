C34
#JDMB - Jump doesnt match end-block
# JMB - jump matches block

The use of jump greatly affects code flow however at times, it provides the fastest way to do things


We want to find a given option in Array and if it exists:
- check if it requires a value (string or integer) as well as assert the correctness of the value assigned to it if the former is true;
- set its value at the program global set variable.

To achieve this, we first of all map each argument to its post argument; the preceding argument is made the key and the latter, the value. This is easily possible using bash's 'Associative Array'.

   ARGS=(-p 0 -f true -h brief)
   MAP_ARGS=(-p='0' 0='-f' -f='true' true='-h' -h='brief' brief='')
   # instead of using the actual argument its index can also be used as a key

Therefore, if argument '-p', requires a value, we expect the next argument to be the required value and so it could be simply access by using it as a key in MAP_ARGS, i.e MAP_ARGS[-p] >> 0
What if the argument (key) is invalid MAP_ARGS[key] will be unset and result in an "unbounded variable" error. However we could resolve this error using the shell parameter editing ${Array[key]:-REPLACEMENT} feature which returns REPLACEMENT when Array is unset.

We could use the exact method discussed above to check if an option requires an argument before requesting it's value from MAP_ARGS. This should look like:

   GLOBAL_OPT=(-p=1 -f=1 -h=1 -c=0)
   key='-p'
   let req=${GLOBAL_OPT[$key]:- NULL}
   if (( $req == 1 )) ; ... # a key is required fi
   # the need for loop has been removed

This wraps it up.

To set all options from a given input: -z -p -s 20 source

# create an array variable with your valid identifiers
# create an array variable to set option and store its value
# create an array variable that maps arguments to next

declare -A OPT (-p=0 -s=1 -z=0)
declare -A SOPT (-p=NULL -s=NULL -z=NULL)
declare -A MOPT (0='-p' 1='-s' 2='20' 3='source' 4='') # index mapping is used here

# get only options ; since we used index it will be useful to store their mapped indices as well

IFS=";"
filter input # filter could be any cmd e.g sed 
filtered_opt=(-z 1; -s 3; -s 2)

for ((argc < ${#filtered_opt})) ; then
    opt = expand filter_opt[argc] (argc=0 -> -z 1)

case OPT(opt[1])
0) does'nt require; SOPT[] 