V -› [i: NULL] V0   -------------›   [i: V0]   V0.0
↑     ↓                        ↑        ↓
[r: V0]  V1 --› [r: V1]  V1.0   [r: V0.0] V0.1
↑     ↓        ↑       ↓       ↑        ↓
[r: V0]  Vn...  [r: V1.0] V1.1  [r: V0.0] V0.n
↑       ↓
[r: v1.0] V1.n...
[
r: replaced on reach
i: replaced immediately. it's value is preserved
in a pointer (usually the first child)
]

[PUSH TO STACK]

We construct an abstract stack: considering the
position of the first child as the 'prev' pointer

Initially, this is set to NULL. since
this position
is overwritten with NULL, it's value is preserved in
a 'transvl' pointer. This pointer is our
transversal pointer
[STACK]
NULL

We transverse the vector's element with
'transvl' pointing at each element
pointer

We assert the type of each element, expecting that
that of a vector. If assertion fails, we release the
memory to the OS, else we repeat the above procedure.
However, rather than NULL we assign it's first child to the current position of the vector pointer. This becomes the current frame of the stack
[STACK]
V <- NULL
The vector pointer assumes the new vector and 'transvl' preserves the value of it's first member and subsequently, that of other elements as it transverse further.

[POP FROM STACK]
To pop from the stack, we must first address few problems:

[i] Since the vector pointer transverses along with 'transvl' we
    will lose access to the vector's meta-data
[ii] We are unable to release the memory of vector, since we've
     lost reference to its first block
[iii] We can't determine the number of elements left of the
      previous vector after a pop (return) to it

To address this we start from the least:

[iii] Before we push a vector to the stack, we update its size to
      the number of elements not yet transversed
[i & ii] We reuse elements for this purpose. Upon transerval of an
     	 element, its position becomes unused, since its value has
	 been freed.
If the next element happens to be a vector, requiring that we push the current vector to the stack, we can preserve the initial (starting) block of the current vector in this unused element, so that accessing the vector's starting block is actually accessing the value of the previous element before the push.

This is true for all elements preceding an element with a vector type except the first element of the vector. This is an obvious reason, no element precedes it and its position is infact the 'first block' of the vector
Notably, a 'tmp' pointer is required to preserve this block until it is needed

So how do we pop?
Upon reaching the end of the current vector:
since a push preserves the previous position of the vector pointer in the first block of the current vector, We access the first block of the current vector either through the 'tmp' pointer (if the last element is non-vector) or through the previous element (if the last element was a vector).

The first block, as stated before, preserves the pointer of the previous vector pointer. Therefore, our vector pointer assumes the value (not the position) of the first block. Consequently, the memory of the 'then' currrent vector can be released.

We have successfull returned to the previous vector at the exact position it was pushed. We resume transversal by getting its size
repeating the same procedure until its size is zero.

We pop repeatedly until the previous pointer is NULL
